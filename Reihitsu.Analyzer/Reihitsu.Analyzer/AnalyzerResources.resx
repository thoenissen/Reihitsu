<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RH0001MessageFormat" xml:space="preserve">
    <value>The logical operator ! should not be used for clarity.</value>
  </data>
  <data name="RH0001Title" xml:space="preserve">
    <value>The logical operator ! should not be used for clarity.</value>
  </data>
  <data name="RH0101MessageFormat" xml:space="preserve">
    <value>Private auto-implemented properties should not be used.</value>
  </data>
  <data name="RH0101Title" xml:space="preserve">
    <value>Private auto-implemented properties should not be used.</value>
  </data>
  <data name="RH0102MessageFormat" xml:space="preserve">
    <value>Async void methods should not be used.</value>
  </data>
  <data name="RH0102Title" xml:space="preserve">
    <value>Async void methods should not be used.</value>
  </data>
  <data name="RH0202MessageFormat" xml:space="preserve">
    <value>Class names should be in PascalCase</value>
  </data>
  <data name="RH0202Title" xml:space="preserve">
    <value>Class names should be in PascalCase</value>
  </data>
  <data name="RH0203MessageFormat" xml:space="preserve">
    <value>Struct names should be in PascalCase</value>
  </data>
  <data name="RH0203Title" xml:space="preserve">
    <value>Struct names should be in PascalCase</value>
  </data>
  <data name="RH0204Title" xml:space="preserve">
    <value>Enumeration names should be in PascalCase</value>
  </data>
  <data name="RH0204MessageFormat" xml:space="preserve">
    <value>Enumeration names should be in PascalCase</value>
  </data>
  <data name="RH0205Title" xml:space="preserve">
    <value>Enumeration members names should be in PascalCase</value>
  </data>
  <data name="RH0205MessageFormat" xml:space="preserve">
    <value>Enumeration members names should be in PascalCase</value>
  </data>
  <data name="RH0206Title" xml:space="preserve">
    <value>Interface names should be in PascalCase</value>
  </data>
  <data name="RH0206MessageFormat" xml:space="preserve">
    <value>Interface names should be in PascalCase</value>
  </data>
  <data name="RH0207Title" xml:space="preserve">
    <value>Event names should be in PascalCase</value>
  </data>
  <data name="RH0207MessageFormat" xml:space="preserve">
    <value>Event names should be in PascalCase</value>
  </data>
  <data name="RH0208Title" xml:space="preserve">
    <value>Delegate names should be in PascalCase</value>
  </data>
  <data name="RH0208MessageFormat" xml:space="preserve">
    <value>Delegate names should be in PascalCase</value>
  </data>
  <data name="RH0209Title" xml:space="preserve">
    <value>Method members names should be in PascalCase</value>
  </data>
  <data name="RH0209MessageFormat" xml:space="preserve">
    <value>Method members names should be in PascalCase</value>
  </data>
  <data name="RH0210Title" xml:space="preserve">
    <value>Local function names should be in PascalCase</value>
  </data>
  <data name="RH0210MessageFormat" xml:space="preserve">
    <value>Local function names should be in PascalCase</value>
  </data>
  <data name="RH0211Title" xml:space="preserve">
    <value>Method parameter names should be in camelCase</value>
  </data>
  <data name="RH0211MessageFormat" xml:space="preserve">
    <value>Method parameter names should be in camelCase</value>
  </data>
  <data name="RH0212Title" xml:space="preserve">
    <value>Private field names should be in _camelCase</value>
  </data>
  <data name="RH0212MessageFormat" xml:space="preserve">
    <value>Private field names should be in _camelCase</value>
  </data>
  <data name="RH0213Title" xml:space="preserve">
    <value>Protected field names should be in _camelCase</value>
  </data>
  <data name="RH0213MessageFormat" xml:space="preserve">
    <value>Protected field names should be in _camelCase</value>
  </data>
  <data name="RH0214Title" xml:space="preserve">
    <value>Internal field names should be in PascalCase</value>
  </data>
  <data name="RH0214MessageFormat" xml:space="preserve">
    <value>Internal field names should be in PascalCase</value>
  </data>
  <data name="RH0215Title" xml:space="preserve">
    <value>Public field names should be in PascalCase</value>
  </data>
  <data name="RH0215MessageFormat" xml:space="preserve">
    <value>Public field names should be in PascalCase</value>
  </data>
  <data name="RH0216Title" xml:space="preserve">
    <value>Const field names should be in PascalCase</value>
  </data>
  <data name="RH0216MessageFormat" xml:space="preserve">
    <value>Const field names should be in PascalCase</value>
  </data>
  <data name="RH0217Title" xml:space="preserve">
    <value>Private property names should be in PascalCase</value>
  </data>
  <data name="RH0217MessageFormat" xml:space="preserve">
    <value>Private property names should be in PascalCase</value>
  </data>
  <data name="RH0218Title" xml:space="preserve">
    <value>Protected property names should be in PascalCase</value>
  </data>
  <data name="RH0218MessageFormat" xml:space="preserve">
    <value>Protected property names should be in PascalCase</value>
  </data>
  <data name="RH0219Title" xml:space="preserve">
    <value>Internal property names should be in PascalCase</value>
  </data>
  <data name="RH0219MessageFormat" xml:space="preserve">
    <value>Internal property names should be in PascalCase</value>
  </data>
  <data name="RH0220Title" xml:space="preserve">
    <value>Public property names should be in PascalCase</value>
  </data>
  <data name="RH0220MessageFormat" xml:space="preserve">
    <value>Public property names should be in PascalCase</value>
  </data>
  <data name="RH0221Title" xml:space="preserve">
    <value>Local variable names should be in camelCase</value>
  </data>
  <data name="RH0221MessageFormat" xml:space="preserve">
    <value>Local variables should be in camelCase</value>
  </data>
  <data name="RH0222Title" xml:space="preserve">
    <value>Named tuple elements should be in PascalCase</value>
  </data>
  <data name="RH0222MessageFormat" xml:space="preserve">
    <value>Named tuple elements should be in PascalCase</value>
  </data>
  <data name="RH0223Title" xml:space="preserve">
    <value>Deconstruction variable names should be in camelCase</value>
  </data>
  <data name="RH0223MessageFormat" xml:space="preserve">
    <value>Variables in deconstruction should be in camelCase</value>
  </data>
  <data name="RH0224Title" xml:space="preserve">
    <value>Named tuple argument names should be in PascalCase</value>
  </data>
  <data name="RH0224MessageFormat" xml:space="preserve">
    <value>Named tuple argument names should be in PascalCase</value>
  </data>
  <data name="RH0225Title" xml:space="preserve">
    <value>Namespaces should be in PascalCase</value>
  </data>
  <data name="RH0225MessageFormat" xml:space="preserve">
    <value>Namespaces should be in PascalCase</value>
  </data>
  <data name="RH0226Title" xml:space="preserve">
    <value>Namespaces should be in PascalCase</value>
  </data>
  <data name="RH0226MessageFormat" xml:space="preserve">
    <value>Namespaces should be in PascalCase</value>
  </data>
  <data name="RH0301MessageFormat" xml:space="preserve">
    <value>The description of the #region and #endregion should match.</value>
  </data>
  <data name="RH0301Title" xml:space="preserve">
    <value>The description of the #region and #endregion should match.</value>
  </data>
  <data name="RH0302MessageFormat" xml:space="preserve">
    <value>The object initializer should be formatted correctly.</value>
  </data>
  <data name="RH0302Title" xml:space="preserve">
    <value>The object initializer should be formatted correctly.</value>
  </data>
  <data name="RH0303MessageFormat" xml:space="preserve">
    <value>The try-Statement should be preceded by a blank line.</value>
  </data>
  <data name="RH0303Title" xml:space="preserve">
    <value>The try-Statement should be preceded by a blank line.</value>
  </data>
  <data name="RH0304MessageFormat" xml:space="preserve">
    <value>The if-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0304Title" xml:space="preserve">
    <value>The if-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0305MessageFormat" xml:space="preserve">
    <value>The while-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0305Title" xml:space="preserve">
    <value>The while-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0306MessageFormat" xml:space="preserve">
    <value>The do-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0306Title" xml:space="preserve">
    <value>The do-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0307MessageFormat" xml:space="preserve">
    <value>The using-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0307Title" xml:space="preserve">
    <value>The using-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0308MessageFormat" xml:space="preserve">
    <value>The foreach-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0308Title" xml:space="preserve">
    <value>The foreach-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0309MessageFormat" xml:space="preserve">
    <value>The for-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0309Title" xml:space="preserve">
    <value>The for-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0310MessageFormat" xml:space="preserve">
    <value>The return-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0310Title" xml:space="preserve">
    <value>The return-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0311MessageFormat" xml:space="preserve">
    <value>The goto-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0311Title" xml:space="preserve">
    <value>The goto-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0312MessageFormat" xml:space="preserve">
    <value>The break-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0312Title" xml:space="preserve">
    <value>The break-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0313MessageFormat" xml:space="preserve">
    <value>The break-Statement should be followed by a blank line.</value>
  </data>
   <data name="RH0313Title" xml:space="preserve">
    <value>The break-Statement should be followed by a blank line.</value>
  </data>
   <data name="RH0314MessageFormat" xml:space="preserve">
    <value>The continue-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0314Title" xml:space="preserve">
    <value>The continue-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0315MessageFormat" xml:space="preserve">
    <value>The throw-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0315Title" xml:space="preserve">
    <value>The throw-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0316MessageFormat" xml:space="preserve">
    <value>The switch-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0316Title" xml:space="preserve">
    <value>The switch-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0317MessageFormat" xml:space="preserve">
    <value>The checked-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0317Title" xml:space="preserve">
    <value>The checked-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0318MessageFormat" xml:space="preserve">
    <value>The unchecked-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0318Title" xml:space="preserve">
    <value>The unchecked-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0319MessageFormat" xml:space="preserve">
    <value>The fixed-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0319Title" xml:space="preserve">
    <value>The fixed-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0320MessageFormat" xml:space="preserve">
    <value>The lock-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0320Title" xml:space="preserve">
    <value>The lock-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0321MessageFormat" xml:space="preserve">
    <value>The yield-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0321Title" xml:space="preserve">
    <value>The yield-Statement should be preceded by a blank line.</value>
  </data>
   <data name="RH0401MessageFormat" xml:space="preserve">
    <value>The \&lt;inheritdoc/&gt; Tag should be used if possible.</value>
  </data>
  <data name="RH0401Title" xml:space="preserve">
    <value>The \&lt;inheritdoc/&gt; Tag should be used if possible.</value>
  </data>
  <data name="RH0501MessageFormat" xml:space="preserve">
    <value>Types used as keys must implement equality members.</value>
  </data>
  <data name="RH0501Title" xml:space="preserve">
    <value>Types used as keys must implement equality members.</value>
  </data>
</root>